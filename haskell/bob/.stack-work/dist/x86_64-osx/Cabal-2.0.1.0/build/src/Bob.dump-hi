
==================== FINAL INTERFACE ====================
2018-01-19 20:38:59.480183 UTC

interface bob-1.2.0.5-41cfZtqo8NrIe4DcDwBya:Bob 8022
  interface hash: 475950692b8c57cf13a2643721e8c26f
  ABI hash: 3524483a50b27a77c3a4f281d4a3bcb5
  export-list hash: 89b87cbbcf8aba598c8c607dbb48b880
  orphan hash: 693e9af84d3dfcc71e640e005bdc5e2e
  flag hash: 0451a77cc0d8e5d99d548d6441c7dd35
  sig of: Nothing
  used TH splices: False
  where
exports:
  Bob.responseFor
module dependencies:
package dependencies: base-4.10.1.0* ghc-prim-0.5.1.1
                      integer-gmp-1.0.1.0
orphans: base-4.10.1.0:GHC.Float base-4.10.1.0:GHC.Base
family instance modules: base-4.10.1.0:Control.Applicative
                         base-4.10.1.0:Data.Either base-4.10.1.0:Data.Functor.Const
                         base-4.10.1.0:Data.Functor.Identity base-4.10.1.0:Data.Monoid
                         base-4.10.1.0:Data.Type.Equality base-4.10.1.0:GHC.Generics
                         base-4.10.1.0:GHC.IO.Exception base-4.10.1.0:GHC.TypeLits
                         base-4.10.1.0:GHC.TypeNats
import  -/  base-4.10.1.0:Data.Char fe4e3458190deeac19969ce15e33bed9
import  -/  base-4.10.1.0:Data.Foldable 9ed87455d68e87ff2b5b8725eae9897e
import  -/  base-4.10.1.0:GHC.Base 782fd99b5e36f3698a26179a49afca64
import  -/  base-4.10.1.0:GHC.List e3060fbeb44ce0038e6b4dedf2dd9cf1
import  -/  base-4.10.1.0:GHC.Unicode 49c9de4fffed0d9be65aaeb6a60b757c
import  -/  base-4.10.1.0:Prelude 31945b7d0084063347fc52506d3a4020
import  -/  ghc-prim-0.5.1.1:GHC.Classes 93e2660065dce9329577e83d76d8f0d4
8499ced5ff47c4bb4a4b8e5568009198
  $trModule :: GHC.Types.Module
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.Module Bob.$trModule3 Bob.$trModule1) -}
3b8a871aede90484d98051a334365b51
  $trModule1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Bob.$trModule2) -}
5705f6a386d16834b32c2d8d64d6df85
  $trModule2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("Bob"#) -}
1c7c55d1fd7081532c5dc3f5f937e3c8
  $trModule3 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Bob.$trModule4) -}
7300e24ac812da851d60abb8e8710cc7
  $trModule4 :: GHC.Prim.Addr#
  {- HasNoCafRefs,
     Unfolding: ("bob-1.2.0.5-41cfZtqo8NrIe4DcDwBya"#) -}
1fdfa2bc90743fa96ee13835d68c1c6f
  $wlvl :: GHC.Prim.Char# -> GHC.Types.Bool
  {- Arity: 1, HasNoCafRefs, Strictness: <S,U>, Inline: [0],
     Unfolding: (\ (ww :: GHC.Prim.Char#) ->
                 let {
                   x :: GHC.Prim.Word# = GHC.Prim.int2Word# (GHC.Prim.ord# ww)
                 } in
                 case GHC.Prim.tagToEnum#
                        @ GHC.Types.Bool
                        (GHC.Prim.leWord# x 887##) of wild {
                   GHC.Types.False
                   -> case {__pkg_ccall base-4.10.1.0 GHC.Prim.Int#
                                                      -> GHC.Prim.State# GHC.Prim.RealWorld
                                                      -> (# GHC.Prim.State# GHC.Prim.RealWorld,
                                                            GHC.Prim.Int# #)}
                             (GHC.Prim.ord# ww)
                             GHC.Prim.realWorld# of wild1 { (#,#) ds ds1 ->
                      case ds1 of wild2 {
                        DEFAULT -> GHC.Types.False 0# -> GHC.Types.True } }
                   GHC.Types.True
                   -> case x of wild1 {
                        DEFAULT
                        -> case GHC.Prim.tagToEnum#
                                  @ GHC.Types.Bool
                                  (GHC.Prim.leWord# (GHC.Prim.minusWord# wild1 9##) 4##) of wild2 {
                             GHC.Types.False
                             -> case wild1 of wild3 {
                                  DEFAULT -> GHC.Types.True 160## -> GHC.Types.False }
                             GHC.Types.True -> GHC.Types.False }
                        32## -> GHC.Types.False } }) -}
3e61b1dd3ae8594f49117431a41fffd3
  isQuestion :: GHC.Base.String -> GHC.Types.Bool
  {- Arity: 1, Strictness: <S,1*U> -}
5cc522b03bee68badc783d0a9e262ee2
  responseFor :: GHC.Base.String -> GHC.Base.String
  {- Arity: 1, Strictness: <S,U>,
     Unfolding: (\ (xs :: GHC.Base.String) ->
                 let {
                   question :: GHC.Types.Bool = Bob.isQuestion xs
                 } in
                 let {
                   yelling :: GHC.Types.Bool
                   = case Bob.responseFor_go1 xs of wild {
                       [] -> GHC.Types.False
                       : ds1 ds2
                       -> case Bob.responseFor_go xs of wild1 {
                            [] -> GHC.Types.False : ds4 ds5 -> GHC.Base.eqString wild wild1 } }
                 } in
                 let {
                   $j :: [GHC.Types.Char] <join 0>
                   = case question of wild {
                       GHC.Types.False
                       -> case yelling of wild1 {
                            GHC.Types.False
                            -> case GHC.List.filter
                                      @ GHC.Types.Char
                                      Bob.responseFor11
                                      xs of wild2 {
                                 [] -> Bob.responseFor9 : ds1 ds2 -> Bob.responseFor7 }
                            GHC.Types.True -> Bob.responseFor5 }
                       GHC.Types.True -> Bob.responseFor3 }
                 } in
                 case question of wild {
                   GHC.Types.False -> $j
                   GHC.Types.True
                   -> case yelling of wild1 {
                        GHC.Types.False -> $j GHC.Types.True -> Bob.responseFor1 } }) -}
0c089e2afbf3af96301b16db6575895c
  responseFor1 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# Bob.responseFor2) -}
81cd887ddab12746efa7b3b475e8f9df
  responseFor10 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("Fine. Be that way!"#) -}
9edda51da69df027104c33899ffadba1
  responseFor11 :: GHC.Types.Char -> GHC.Types.Bool
  {- Arity: 1, HasNoCafRefs, Strictness: <S(S),1*U(U)>, Inline: [0],
     Unfolding: InlineRule (1, True, False)
                (\ (w :: GHC.Types.Char) ->
                 case w of ww { GHC.Types.C# ww1 -> Bob.$wlvl ww1 }) -}
3526c9914a78d20258035eb68baa7f2f
  responseFor2 :: GHC.Prim.Addr#
  {- HasNoCafRefs,
     Unfolding: ("Calm down, I know what I'm doing!"#) -}
063394b4a4c7da578d106168509421ff
  responseFor3 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# Bob.responseFor4) -}
48ebc0f6aa102efd982c5106c40af650
  responseFor4 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("Sure."#) -}
34736933f8448b4c5d661675b8712656
  responseFor5 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# Bob.responseFor6) -}
f7f693b4a699e4f43c90bd4a337942ab
  responseFor6 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("Whoa, chill out!"#) -}
3962cf45b399e8bd421a88e7c3266ef9
  responseFor7 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# Bob.responseFor8) -}
3679b3331552567330c59cfb69ab74c8
  responseFor8 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("Whatever."#) -}
bae8f99dee5afbe454b361ddf17734b8
  responseFor9 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# Bob.responseFor10) -}
086bb5632c07fed0c0ec0816ba154697
  responseFor_go :: [GHC.Types.Char] -> [GHC.Types.Char]
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U> -}
ff7f2461c216afeda61dbfe006e8f495
  responseFor_go1 :: [GHC.Types.Char] -> [GHC.Types.Char]
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U> -}
vectorised variables:
vectorised tycons:
vectorised reused tycons:
parallel variables:
parallel tycons:
trusted: safe
require own pkg trusted: False

